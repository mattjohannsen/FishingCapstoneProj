@model FishingCapstone.Models.Explorer

@{
    ViewData["Title"] = "Details";
    Layout = "~/Views/Shared/_Layout-Explorer.cshtml";

}

<h1>My Fishing Trips</h1>

<div>
    <h4>@Html.DisplayFor(model => model.FirstName) @Html.DisplayFor(model => model.LastName)</h4>
</div>
<style>
    /* Set the size of the div element that contains the map */
    #map {
        height: 400px; /* The height is 400 pixels */
        width: 100%; /* The width is the width of the web page */
    }
</style>
<!--The div element for the map -->
<div id="map"></div>
<script>
    // Initialize and add the map
    function initMap() {
        var address = { lat: 43.0389, lng: -87.9065 };
        var map = new google.maps.Map(document.getElementById('map'), { zoom: 3, center: address });
        @foreach(var item in Model.Trips)
        {
            <text>addMarker({
                coords: { lat: @item.Destination.DestinationLat, lng: @item.Destination.DestinationLong },
                content : '<div id="content"><h1 id="firstHeading" class="firstHeading">@item.TripName</h1>' +
                '<div id="bodyContent">' +
                '<p>Date: @item.TripStart - @item.TripEnd</p>' +
                '<p>Guide: @item.TripGuideService</p>' +
                    '<p><a href="../../Trips/Details/@item.TripId">Photo Album</a> - ' +
                    '<a href="../../Trips/PhotoMap/@item.TripId">See Photos On Map</a> ' +
                '</p>' +
                '</div>' +
                '</div>'
            });</text>
        }
        function addMarker(props) {
            var marker = new google.maps.Marker({ position: props.coords, map: map });
            if (props.content) {
                var infowindow = new google.maps.InfoWindow({
                    content: props.content
                });


                marker.addListener('click', function () {
                    infowindow.open(map, marker);
                });
            }
        }
    }
</script>
<!--Load the API from the specified URL
* The async attribute allows the browser to render the page while the API loads
* The key parameter will contain your own API key (which is not needed for this tutorial)
* The callback parameter executes the initMap() function
-->
<script async defer
        src="https://maps.googleapis.com/maps/api/js?key=@APIKEYS.GoogleAPIKey&callback=initMap">
</script>
<div>
    <a asp-action="Edit" asp-route-id="@Model.ExplorerId">Edit</a> |
    <a asp-action="Index">Back to List</a>
</div>
