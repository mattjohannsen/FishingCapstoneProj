@model FishingCapstone.Models.Destination

@{
    ViewData["Title"] = "Details";
    Layout = "~/Views/Shared/_Layout-Explorer.cshtml";
}

    <h1>Destination</h1>

<div>
    <h4>@Html.DisplayFor(model => model.DestinationName)</h4>
</div>
<style>
    /* Set the size of the div element that contains the map */
    #map {
        height: 600px; /* The height is 400 pixels */
        width: 100%; /* The width is the width of the web page */
    }
</style>
<!--The div element for the map -->
<div id="map"></div>
<script>
    // Initialize and add the map
    function initMap() {
        var address = { lat: @Html.DisplayFor(model => model.DestinationLat), lng: @Html.DisplayFor(model => model.DestinationLong) };
        var map = new google.maps.Map(document.getElementById('map'), { zoom: 12, center: address });
        addMarker({
                coords: { lat: @Html.DisplayFor(model => model.DestinationLat), lng: @Html.DisplayFor(model => model.DestinationLong) },
            content: '<div id="content" style="height:400px; width: 600px;"><h1 id="firstHeading" class="firstHeading">@Html.DisplayFor(model => model.DestinationName)</h1>' +
                '<div id="bodyContent">' +
                '<p>@Html.DisplayNameFor(model => model.DestinationLat): @Html.DisplayFor(model => model.DestinationLat)</p>' +
                '<p>@Html.DisplayNameFor(model => model.DestinationLong): @Html.DisplayFor(model => model.DestinationLong)</p>' +
                '</div>' +
                '</div>'
            });
        function addMarker(props) {
            var marker = new google.maps.Marker({ position: props.coords, map: map });
            if (props.content) {
                var infowindow = new google.maps.InfoWindow({
                    content: props.content
                });


                marker.addListener('click', function () {
                    infowindow.open(map, marker);
                });
            }
        }
    }
</script>
<!--Load the API from the specified URL
* The async attribute allows the browser to render the page while the API loads
* The key parameter will contain your own API key (which is not needed for this tutorial)
* The callback parameter executes the initMap() function
-->
<script async defer
        src="https://maps.googleapis.com/maps/api/js?key=@APIKEYS.GoogleAPIKey&callback=initMap">
</script>
<table class="table table-hover">
    <thead>
        <tr>
            <th scope="col"></th>
            <th scope="col">Available Species for: @Html.DisplayFor(model => model.DestinationName)</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model.AvailableSpecies)
        {
        <tr>

            <td>
                <a asp-controller="Species" asp-action="Calendar" asp-route-id="@item.SpeciesId"><img src="~/images/thumbnails/@item.Thumbnail" alt="@item.SpeciesName" width="90"></a>
            </td>
            <td>
                <a asp-controller="Species" asp-action="Calendar" asp-route-id="@item.SpeciesId">@item.SpeciesName</a>
            </td>
        </tr>
        }
    </tbody>
</table>
<div>
    <a asp-action="Edit" asp-route-id="@Model.DestinationId">Edit</a> |
    <a asp-action="Index">Back to Destinations List</a>
</div>
